/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <stdio.h>
#include <string.h>
#include <dlfcn.h>
#include "sys/syscall.h"
#include "com_type.h"
/* Header for class lib_func_jni_JniTest */


//---------------------------------------------------
// Log
//---------------------------------------------------
#define JNI_DEBUG

#ifdef JNI_DEBUG

#ifndef LOG_TAG
#define LOG_TAG "JNI_DEBUG"
#endif

#include <android/log.h>

#define LOGE(msg) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, msg)
#define LOGI(msg) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, msg)
#define lOGD(msg) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, msg)

#endif



#ifndef _Included_lib_func_jni_JniTest
#define _Included_lib_func_jni_JniTest
#ifdef __cplusplus

#define OUTPUT
#define gettid() syscall(__NR_gettid)

extern "C" {
#endif


jstring chartojstr(JNIEnv* env, const char* pat);
char* jstringTostring(JNIEnv* env, jstring jstr);
S32 ldcls(jclass* jcls,char* bName,JNIEnv *env);
jboolean newObj(JNIEnv*env, jclass cls,jobject * jobj);
//JNIEnv *JNU_GetEnv();
 
typedef struct Person
{
	jfieldID name;
	jfieldID age;
	jfieldID height;
}PERSON,*LPJ_PERSON;
PERSON sctPerson;


typedef struct JniTest
{
	jmethodID mCallback;
}JNI_TEST,*LPJ_JNI_TEST;
JNI_TEST sctJniTest;

jclass clsPerson,clsJniTest;
JavaVM* jvm; 



/*
 * Class:  lib_func_jni_JniTest
 * Method: fnwindll
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_lib_func_jni_JniTest_fnwindll
  (JNIEnv * env, jobject jobj){  
  	
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: getLine
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_lib_func_jni_JniTest_getLine
  (JNIEnv * env, jobject jobj, jstring param){
		char line[300];
		char* paramPtr = jstringTostring(env,param);
		sprintf(line,"getLine: %s ",paramPtr);
		LOGI(line);
		//return chartojstr(env,line);
		jstring jstr = env->NewStringUTF(line);
		
		/*
		jobject objPerson = NULL;
		newObj(env,clsPerson,&objPerson);
		if(objPerson!=NULL){
			env->SetIntField(objPerson, sctPerson.age, 27); 
			env->SetFloatField(objPerson, sctPerson.height, 172.5); 
			env->SetObjectField(objPerson, sctPerson.name, chartojstr(env,"ÀîËÄ"));
			env->CallVoidMethod(jobj,jniTest.mCallback,1000,objPerson);
		}else{
			OUTPUT("[JNI:%d]  lampobj is null .... \n",gettid());	
		}
		env->DeleteLocalRef(objPerson);
		*/ 
		return jstr;

  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testFloat
 * Signature: (F)F
 */
JNIEXPORT jfloat JNICALL Java_lib_func_jni_JniTest_testFloat
  (JNIEnv * env, jclass cls, jfloat param){
  	
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testDouble
 * Signature: (D)D
 */
JNIEXPORT jdouble JNICALL Java_lib_func_jni_JniTest_testDouble
  (JNIEnv * env, jclass cls, jdouble param){
  	
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testInt
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_lib_func_jni_JniTest_testInt
  (JNIEnv * env, jclass cls, jint param){
  	
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testChar
 * Signature: (C)C
 */
JNIEXPORT jchar JNICALL Java_lib_func_jni_JniTest_testChar
  (JNIEnv * env, jclass cls, jchar param){
  		
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testShort
 * Signature: (S)S
 */
JNIEXPORT jshort JNICALL Java_lib_func_jni_JniTest_testShort
  (JNIEnv * env, jclass cls, jshort param){
  		
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testBoolean
 * Signature: (Z)Z
 */
JNIEXPORT jboolean JNICALL Java_lib_func_jni_JniTest_testBoolean
  (JNIEnv * env, jclass cls, jboolean param){
  	
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testLong
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_lib_func_jni_JniTest_testLong
  (JNIEnv * env, jclass cls, jlong param){
  	
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testString
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_lib_func_jni_JniTest_testString
  (JNIEnv * env, jclass cls, jstring param){
  		
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testStringArray
 * Signature: ([Ljava/lang/String;)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_lib_func_jni_JniTest_testStringArray
  (JNIEnv * env, jclass cls, jobjectArray param){
  		
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testIntArray
 * Signature: ([I)[I
 */
JNIEXPORT jintArray JNICALL Java_lib_func_jni_JniTest_testIntArray
  (JNIEnv * env, jclass cls, jintArray param){
  		
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testObject
 * Signature: (Llib/func/jni/Person;)Llib/func/jni/Person;
 */
JNIEXPORT jobject JNICALL Java_lib_func_jni_JniTest_testObject
  (JNIEnv * env, jclass cls, jobject param){
  		
  }

/*
 * Class:  lib_func_jni_JniTest
 * Method: testException
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_lib_func_jni_JniTest_testException
  (JNIEnv * env, jclass cls){}


 
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *_jvm, void *reserved)
{
	JNIEnv *env;
	jclass cls;
	jvm = _jvm;	 
	S32 ret;
	if (jvm->GetEnv((void**)&env,JNI_VERSION_1_4)) {
		return JNI_ERR;
	}
 
	ret = ldcls(&clsPerson,(char*)"lib/func/jni/Person",env);
	LOGI("clsPerson");
	LOGI(ret);
	if(ret<0){
		return ret;
	}
	ret = ldcls(&clsJniTest,(char*)"lib/func/jni/JniTest",env);
	LOGI("clsJniTest");
	LOGI(ret);
	if(ret<0){
		return ret;
	}
	
	sctPerson.name = env->GetFieldID(clsPerson, "name", "Ljava/lang/String;");
	sctPerson.age = env->GetFieldID(clsPerson, "age", "I"); 
  sctPerson.height = env->GetFieldID(clsPerson, "height", "F"); 
	 
	
	sctJniTest.mCallback = env->GetMethodID(clsJniTest,"callback","(ILlib/func/jni/Person;)V");
	if (sctJniTest.mCallback  == NULL) {
		return JNI_ERR;
	}
 	 
	LOGI("....load success..... ");
	return JNI_VERSION_1_4;
}
 

jstring chartojstr(JNIEnv* env, const char* pat)
{
	jclass strClass = env->FindClass("java/lang/String;");
	jmethodID ctorID = env->GetMethodID(strClass, "<init>", "([BLjava/lang/String;)V");
	jbyteArray bytes = env->NewByteArray(strlen(pat));
	env->SetByteArrayRegion(bytes, 0, strlen(pat), (jbyte*)pat);
	jstring encoding = env->NewStringUTF("utf-8");
	LOGI("chartojstr    success..... ");
	return (jstring)env->NewObject(strClass, ctorID, bytes, encoding);
}

char* jstringTostring(JNIEnv* env, jstring jstr)
{
	char* rtn = NULL;
	jclass clsstring = env->FindClass("java/lang/String");
	jstring strencode = env->NewStringUTF("utf-8");
	jmethodID mid = env->GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B");
	jbyteArray barr= (jbyteArray)env->CallObjectMethod(jstr, mid, strencode);
	jsize alen = env->GetArrayLength(barr);
	jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);
	if (alen > 0)
	{
	rtn = (char*)malloc(alen + 1);

	memcpy(rtn, ba, alen);
	rtn[alen] = 0;
	}
	env->ReleaseByteArrayElements(barr, ba, 0);
	return rtn;
}


S32 ldcls(jclass* pjcls,char * bName,JNIEnv *env){
	jclass cls = env->FindClass(bName);
	if (cls == NULL) {
		return JNI_ERR;
	}
	*pjcls = (jclass)env->NewWeakGlobalRef(cls);
	if (*pjcls == NULL) {
		return JNI_ERR;
	}
	return 0;
}

jboolean newObj(JNIEnv*env, jclass cls,jobject * jobj){
	jmethodID cstrut = env->GetMethodID(cls, "<init>", "()V");
	OUTPUT("[JNI:%d] +++++++++++++++++++++++++++ 1  \n",gettid());	
	jobject _obj = env->NewObject(cls,cstrut);
  if(env->ExceptionOccurred()){
  	OUTPUT("[JNI:%d] ...  newObj fail ....\n",gettid());
  	return 0;
  }
  if(_obj!=NULL){
  	*jobj = _obj;
	}
}

/*
JNIEnv *JNU_GetEnv()
{
	JNIEnv *env = NULL;
	jint sts = jvm->GetEnv((void**)&env,JNI_VERSION_1_6);
	if(sts < 0){
		sts = jvm->AttachCurrentThread((void**)&env,NULL);	
		if(sts <0){
			return NULL;	
		}
		LOGI("jvm AttachCurrentThread...\n");
	}
	return env;
}
*/
#ifdef __cplusplus
}
#endif
#endif
